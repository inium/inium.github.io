<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on inlee's blog</title><link>https://inium.github.io/tags/docker/</link><description>Recent content in docker on inlee's blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright><lastBuildDate>Fri, 06 May 2022 18:24:45 +0000</lastBuildDate><atom:link href="https://inium.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>업무용 컴퓨터를 Mac 에서 PC로 변경</title><link>https://inium.github.io/2022/05/work-from-mac-to-pc/</link><pubDate>Fri, 06 May 2022 18:24:45 +0000</pubDate><guid>https://inium.github.io/2022/05/work-from-mac-to-pc/</guid><description>회사에서 업무용 컴퓨터로 LG그램(gram)를 지급해주었다. Mac을 선호하지만 Windows 도 거부감이 없으며 회사에서 사용중인 보안솔루션으로 인해 Mac을 사용할 수 없는 환경이기도 하다. 하지만 macOS를 오랫동안 사용해와서 그런지 Windows에서 사소하다면 사소한 불편한 점들과 개발환경 구성에서의 특이사항이 있어 이를 작성해보고자 한다.
키보드 키 매핑 macOS ↔ Windows 라면 100% 공감할 것이다. 특히 macOS의 Command와 Windows의 Control 위치로 인해 서로간 적응이 쉽지 않다. 게다가 회사에선 Windows, 집에선 macOS를 쓴다면 매번 헷갈린다.
그래서 인터넷에 윈도우즈 키보드 배열을 Mac 처럼 바꿔주는 것이 있는지 찾아보았는데, 마음에 드는건 없어 AutoHotKey를 이용해 자주사용하는 키인 Windows Control, 한/영 전환만 macOS 처럼 바꾸어 사용하였다.</description></item><item><title>PHP Dockerfile 만들기 (with Laravel, Xdebug, vscode)</title><link>https://inium.github.io/2020/04/docker-php-laravel-xdebug-vscode/</link><pubDate>Sun, 19 Apr 2020 02:37:43 +0000</pubDate><guid>https://inium.github.io/2020/04/docker-php-laravel-xdebug-vscode/</guid><description>PHP docker 공식 이미지는 PHP만 제공하기 때문에 추가로 필요한 패키지들은 별도로 설치하여 사용해야 한다. 그리고 Laravel과 같이 특정 라이브러리들을 필수로 하는 프레임워크도 있기 때문에 대부분의 사용자들은 패키지들을 추가한 Dockerfile을 정의하여 사용한다.
이 글은 PHP docker 공식 이미지에 일반 PHP와 Laravel 기반의 어플리케이션 개발/운영 환경을 포함하는 Dockerfile을 만든 내용이다.이를 위해 PHP에서 필수라 생각되는 패키지와 Laravel에서 요구하는 필수 패키지 설치와 실행 설정을 하였다. 추가로 PHP 코드 디버깅(Debugging)을 위한 Xdebug 설정과 Visual Studio Code 에서의 설정을 하였다.</description></item><item><title>Docker를 이용한 Reverse Proxy 서버 구성 및 자동화</title><link>https://inium.github.io/2020/04/docker-nginx-certbot/</link><pubDate>Fri, 03 Apr 2020 19:59:23 +0000</pubDate><guid>https://inium.github.io/2020/04/docker-nginx-certbot/</guid><description>이 글은 Docker를 이용해 NginX Reverse Proxy 서버를 구성한 후 2개의 웹 어플리케이션(Node.js App, phpmyadmin)과 MySQL을 설한 방법에 대한 내용이다. 그리고 웹 어플리케이션에 사용한 Let&amp;rsquo;s Encrypt 인증서 발급 및 갱신, 확인 과정을 추가하였으며 마지막으로 이들을 자동화한 방법에 대해 소개하고자 한다.
배경 기존 위의 그림과 같이 Docker NginX(Reverse Proxy), 어플리케이션들, DB를 설정하여 사용했었다. docker compose를 이용하면 설정파일(.yml)에 정의한 Container 들이 한번에 실행이 가능해 자동화 할 수 있으나 NginX 환경설정 파일(.conf)의 도메인 이름과 인증서 저장 경로는 프로젝트에 의존적인 값이기 때문에 항상 수동으로 직접 입력하여 사용하였다.</description></item><item><title>회사 소프트웨어 개발 문화를 만든 과정과 느낀점</title><link>https://inium.github.io/2020/03/build-dev-culture/</link><pubDate>Mon, 23 Mar 2020 17:36:14 +0000</pubDate><guid>https://inium.github.io/2020/03/build-dev-culture/</guid><description>과유불급(過猶不及) - 정도를 지나침은 미치지 못한 것과 같음.
개발자들이 자부심을 가지고 있는 것 중 하나는 사내의 개발 문화라고 생각한다. 이 개발 문화로 인해 개인이 성장하고 협업이 수월하게 되며 소스 코드의 품질이 올라간다. 심지어 개발자 채용에도 영향을 미친다. 마치 개발자들에게 매우 좋은 장비(특히 Mac과 4K 모니터)를 지급한다고 하면 혹하는 것처럼.
이전 회사는 작은 규모였으며 초기에 개발 문화라는 것이 없었다. 담당자가 관리한 결과물을 인수인계해 주는 방식이였다. 이 글은 개발 업무 과정에서 나가며 느꼈던 불편한 점을 해결하고 추가로 진행했던 것들을 포함해 개발 문화를 만들어 간 과정과 느낀 점에 대한 이야기이다.</description></item></channel></rss>